const ava = require('ava')
const {join} = require('path')
const fs = require('fs').promises
const JsEvalConfineRuntime = require('../index.js')
const {fakeIpc} = require('./util/util.js')
const {pack, unpack} = require('msgpackr')

ava('Basic', async t => {
  const ipc = fakeIpc()
  const source = await fs.readFile(join(__dirname, 'programs', 'basic.js'))
  const runtime = new JsEvalConfineRuntime({source, ipc})
  await runtime.init()
  await runtime.run()
  t.is(ipc.messages.length, 2)
  t.is(ipc.messages[0].type, 'notify')
  t.deepEqual(unpack(ipc.messages[0].body).params, {stderr: false, data: 'hello, world'})
  t.is(ipc.messages[1].type, 'notify')
  t.deepEqual(unpack(ipc.messages[1].body).params, {stderr: true, data: 'hello, error'})
})

ava('Classes', async t => {
  const ipc = fakeIpc()
  const source = await fs.readFile(join(__dirname, 'programs', 'classes.js'))
  const runtime = new JsEvalConfineRuntime({source, ipc})
  await runtime.init()
  await runtime.run()
  t.is(ipc.messages.length, 1)
  t.is(ipc.messages[0].type, 'notify')
  t.deepEqual(unpack(ipc.messages[0].body).params, {stderr: false, data: 'Hello from MyClass'})
})

ava('Require', async t => {
  const ipc = fakeIpc()
  const source = await fs.readFile(join(__dirname, 'programs', 'require.js'))
  const runtime = new JsEvalConfineRuntime({source, ipc})
  await runtime.init()
  await runtime.run()
  t.is(ipc.messages.length, 1)
  t.is(ipc.messages[0].type, 'notify')
  t.deepEqual(unpack(ipc.messages[0].body).params, {stderr: false, data: 'string'})
})

ava('Messaging', async t => {
  const ipc = fakeIpc()
  const source = await fs.readFile(join(__dirname, 'programs', 'messaging.js'))
  const runtime = new JsEvalConfineRuntime({source, ipc})
  await runtime.init()
  await runtime.run()
  const res1 = unpack(await runtime.handleRequest(pack({method: 'succeed'})))
  const res2 = unpack(await runtime.handleRequest(pack({method: 'pingMe'})))
  const res3 = unpack(await runtime.handleRequest(pack({method: 'badmethod'})).catch(e => e))
  t.truthy(res1.isGood)
  t.truthy(res2.isGood)
  t.is(res3.message, 'Undefined method')
  t.is(ipc.messages.length, 1)
  t.is(ipc.messages[0].type, 'request')
  t.deepEqual(unpack(ipc.messages[0].body).method, 'pongMe')
})